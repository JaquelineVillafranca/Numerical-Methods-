import numpy as np
#DESCOMPOSICION
m = ((0.2,2,-5,6,1),(10,1,-30,4,4),(3,-0.18,15,-11,-12),(7,0.3,-20,15,-3))

#U matrix(Con determinante)
#Linea 1 de la matrix
U = [[0.2,2,-5,6,1]]
L2 = []
L3 = []
L4 = []

#Para linea 2:
for i in range(0,5):
    factor = m[1][0]/m[0][0]
    valor = factor * m[0][i]
    NuevaPo = m[1][i] - valor
    L2.append(NuevaPo)
U.append(L2)
#Para linea 3:
for y in range(0,5):
    factor3 = m[2][0] / m[0][0]
    valor3 = factor3 * m[0][y]
    Pos = m[2][y] - valor3
    L3.append(Pos)

    if y >1:
        nfactor= L3[1]/L2[1]
        valor4 = nfactor * L2[y]
        Pos4 = L3[y] - valor4
        #print(Pos4)
        L3[y]=Pos4

L3[1]=0.0
U.append(L3)

#Linea4
for z in range (0,5):
    factor = m[3][0] / m[0][0]
    valor = factor * m[0][z]
    Pos = m[3][z] - valor
    L4.append(Pos)

    if z >1:
        factor1= L4[1]/L2[1]
        valor1= factor1 * L2[z]
        Pos1= L4[z]-valor1
        L4[z]= Pos1
        if z >2:
            factor2 = L4 [2]/L3[2]
            valor2= factor2 * L3[z]
            Pos2= L4[z]-valor2
            L4[z]=Pos2
L4[0]=0.0
L4[1]=0.0
L4[2]=0.0
U.append(L4)
u= np.array(U)
np.set_printoptions(suppress=True)
print("U =")
print(u)

#--------------------------------------------------------------------
#L Matrix

L=[[1,0,0,0],
   [3,1,0,0],
   [3,3,1,0],
   [3,3,3,1]]
L[1][0]= m[1][0]/U[0][0]
L[2][0]= m[2][0]/U[0][0]
L[3][0]= m[3][0]/U[0][0]

#Para los otros valores
L[2][1]= (m[2][1]-U[0][1]*L[2][0])/U[1][1]
L[3][1]= 0.704040
L[3][2]= 0.004844961240310217
l= np.array(L)
np.set_printoptions(suppress=True)
print(" ")
print("L =")
print(l)

#SUSTITUCION-----------------------------------------------
#Foward substitution; Ly=B
d=[1,4,-12,-3]
y1=d[0]
y2= (d[1]-L[1][0]*y1)
y3= d[2] - L[2][0]*y1 -L[2][1]*y2
y4= d[3] -L[3][0]*y1 -L[3][1]*y2 -L[3][2]*y3

print(" ")
#Back substitution: Ux = y
x4=y4/U[3][3]
print("x4=",x4)
x3=(y3-U[2][3]*x4)/U[2][2]
print("x3=",x3)
x2=(y2-U[1][2]*x3 -U[1][3]*x4)/U[1][1]
print("x2=",x2)
x1=(y1-U[0][1]*x2-U[0][2]*x3-U[0][3]*x4)/U[0][0]
print("x1=",x1)

#----------------------------------------
#INVERSE MATRIX
L11=[]
L22=[]
L33=[]
L44=[]

for t in range(0,4):
    d1 = [0, 0, 0, 0]
    d1[t]=1
    y1 = d1[0]
    y2 = (d1[1] - L[1][0] * y1)
    y3 = d1[2] - L[2][0] * y1 - L[2][1] * y2
    y4 = d1[3] - L[3][0] * y1 - L[3][1] * y2 - L[3][2] * y3
    x4 = y4 / U[3][3]
    x3 = (y3 - U[2][3] * x4) / U[2][2]
    x2 = (y2 - U[1][2] * x3 - U[1][3] * x4) / U[1][1]
    x1 = (y1 - U[0][1] * x2 - U[0][2] * x3 - U[0][3] * x4) / U[0][0]
    L11.append(x1)
    L22.append(x2)
    L33.append(x3)
    L44.append(x4)

Inverse=[]
Inverse.append(L11)
Inverse.append(L22)
Inverse.append(L33)
Inverse.append(L44)

inverse= np.array(Inverse)
np.set_printoptions(suppress=True)
print(" ")
print("Inverse =")
print(inverse)
